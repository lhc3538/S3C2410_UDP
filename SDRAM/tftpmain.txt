; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\tftpmain.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\tftpmain.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\tftpmain.crf Source\tftp\tftpmain.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ntohs PROC
;;;3      
;;;4      unsigned short ntohs(unsigned short s)
000000  e1a01000          MOV      r1,r0
;;;5      {
;;;6      	return (s >> 8) | (s << 8);
000004  e1a00441          ASR      r0,r1,#8
000008  e1800401          ORR      r0,r0,r1,LSL #8
00000c  e3c008ff          BIC      r0,r0,#0xff0000
;;;7      }
000010  e12fff1e          BX       lr
;;;8      
                          ENDP

                  ntohl PROC
;;;9      unsigned long ntohl(unsigned long l)
000014  e1a01000          MOV      r1,r0
;;;10     {
;;;11     	return  ((l >> 24) & 0x000000ff) |
000018  e3a02cff          MOV      r2,#0xff00
00001c  e0022421          AND      r2,r2,r1,LSR #8
000020  e1820c21          ORR      r0,r2,r1,LSR #24
000024  e3a028ff          MOV      r2,#0xff0000
000028  e0022401          AND      r2,r2,r1,LSL #8
00002c  e1800002          ORR      r0,r0,r2
000030  e3a024ff          MOV      r2,#0xff000000
000034  e0022c01          AND      r2,r2,r1,LSL #24
000038  e1800002          ORR      r0,r0,r2
;;;12     		((l >>  8) & 0x0000ff00) |
;;;13     		((l <<  8) & 0x00ff0000) |
;;;14     		((l << 24) & 0xff000000);
;;;15     }
00003c  e12fff1e          BX       lr
;;;16     
                          ENDP

                  htons PROC
;;;17     unsigned short htons(unsigned short s)
000040  e1a01000          MOV      r1,r0
;;;18     {
;;;19     	return (s >> 8) | (s << 8);
000044  e1a00441          ASR      r0,r1,#8
000048  e1800401          ORR      r0,r0,r1,LSL #8
00004c  e3c008ff          BIC      r0,r0,#0xff0000
;;;20     }
000050  e12fff1e          BX       lr
;;;21     
                          ENDP

                  htonl PROC
;;;22     unsigned long htonl(unsigned long l)
000054  e52de004          PUSH     {lr}
;;;23     {
000058  e1a03000          MOV      r3,r0
;;;24     	return ntohl(l);
00005c  e1a00003          MOV      r0,r3
000060  ebfffffe          BL       ntohl
000064  e49de004          POP      {lr}
;;;25     }
000068  e12fff1e          BX       lr
;;;26     
                          ENDP

                  net_handle PROC
;;;17     
;;;18     int net_handle(void)
00006c  e92d4070          PUSH     {r4-r6,lr}
;;;19     {
;;;20     	struct sk_buff *skb;
;;;21     	struct ethhdr *eth_hdr;												
;;;22     	skb = alloc_skb(ETH_FRAME_LEN);
000070  e59f02d4          LDR      r0,|L1.844|
000074  ebfffffe          BL       alloc_skb
000078  e1a05000          MOV      r5,r0
;;;23     
;;;24     	if (eth_rcv(skb) != -1) 
00007c  e1a00005          MOV      r0,r5
000080  ebfffffe          BL       eth_rcv
000084  e3700001          CMN      r0,#1
000088  0a000015          BEQ      |L1.228|
;;;25     	{
;;;26     
;;;27     		eth_hdr = (struct ethhdr *)(skb->data);					
00008c  e59545f0          LDR      r4,[r5,#0x5f0]
;;;28     		skb_pull(skb, ETH_HLEN);
000090  e3a0100e          MOV      r1,#0xe
000094  e1a00005          MOV      r0,r5
000098  ebfffffe          BL       skb_pull
;;;29     		if (ntohs(eth_hdr->h_proto) == ETH_P_ARP)
00009c  e5d4100d          LDRB     r1,[r4,#0xd]
0000a0  e5d4200c          LDRB     r2,[r4,#0xc]
0000a4  e1820401          ORR      r0,r2,r1,LSL #8
0000a8  ebfffffe          BL       ntohs
0000ac  e2401b02          SUB      r1,r0,#0x800
0000b0  e2511006          SUBS     r1,r1,#6
0000b4  1a000002          BNE      |L1.196|
;;;30     		{
;;;31     			arp_rcv_packet(skb);
0000b8  e1a00005          MOV      r0,r5
0000bc  ebfffffe          BL       arp_rcv_packet
0000c0  ea000007          B        |L1.228|
                  |L1.196|
;;;32     
;;;33     		}
;;;34     
;;;35     		else if(ntohs(eth_hdr->h_proto) == ETH_P_IP)						
0000c4  e5d4100d          LDRB     r1,[r4,#0xd]
0000c8  e5d4200c          LDRB     r2,[r4,#0xc]
0000cc  e1820401          ORR      r0,r2,r1,LSL #8
0000d0  ebfffffe          BL       ntohs
0000d4  e3500b02          CMP      r0,#0x800
0000d8  1a000001          BNE      |L1.228|
;;;36     		{
;;;37     
;;;38     		 	ip_rcv_packet(skb);
0000dc  e1a00005          MOV      r0,r5
0000e0  ebfffffe          BL       ip_rcv_packet
                  |L1.228|
;;;39     
;;;40     		}
;;;41     	 	
;;;42     	}
;;;43     
;;;44     	free_skb(skb);
0000e4  e1a00005          MOV      r0,r5
0000e8  ebfffffe          BL       free_skb
;;;45     
;;;46     	return 0;
0000ec  e3a00000          MOV      r0,#0
0000f0  e8bd4070          POP      {r4-r6,lr}
;;;47     }
0000f4  e12fff1e          BX       lr
;;;48     
                          ENDP

                  NetLoadFile PROC
;;;57     
;;;58     int NetLoadFile(UINT32T addr, UINT32T give_ip, UINT32T a3, UINT32T a4)
0000f8  e92d41ff          PUSH     {r0-r8,lr}
;;;59     {
0000fc  e24dd018          SUB      sp,sp,#0x18
000100  e1a06000          MOV      r6,r0
000104  e1a07002          MOV      r7,r2
000108  e1a08003          MOV      r8,r3
;;;60     	struct sk_buff *skb = alloc_skb(ETH_FRAME_LEN);
00010c  e59f0238          LDR      r0,|L1.844|
000110  ebfffffe          BL       alloc_skb
000114  e1a05000          MOV      r5,r0
;;;61     	unsigned char eth_addr[ETH_ALEN];	
;;;62     	unsigned char *s;
;;;63     	int i;
;;;64     	unsigned char *p;
;;;65     	give_ip = LOCAL_IP_ADDR;
000118  e59f0230          LDR      r0,|L1.848|
00011c  e58d001c          STR      r0,[sp,#0x1c]
;;;66     	s = (unsigned char *)&give_ip;
000120  e28d401c          ADD      r4,sp,#0x1c
;;;67     	
;;;68     	uart_printf("Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n", s[3], s[2], s[1], s[0], TFTP);		
000124  e3a01045          MOV      r1,#0x45
000128  e5d40000          LDRB     r0,[r4,#0]
00012c  e88d0003          STM      sp,{r0,r1}
000130  e5d43001          LDRB     r3,[r4,#1]
000134  e5d42002          LDRB     r2,[r4,#2]
000138  e5d41003          LDRB     r1,[r4,#3]
00013c  e28f0e21          ADR      r0,|L1.852|
000140  ebfffffe          BL       uart_printf
;;;69     	uart_printf("Type tftp -i %d.%d.%d.%d put filename at the host PC\n", s[3], s[2], s[1], s[0]);
000144  e5d40000          LDRB     r0,[r4,#0]
000148  e58d0000          STR      r0,[sp,#0]
00014c  e5d43001          LDRB     r3,[r4,#1]
000150  e5d42002          LDRB     r2,[r4,#2]
000154  e5d41003          LDRB     r1,[r4,#3]
000158  e28f0f8a          ADR      r0,|L1.904|
00015c  ebfffffe          BL       uart_printf
;;;70     
;;;71     	eth_init();		
000160  ebfffffe          BL       eth_init
;;;72     	eth_get_addr(eth_addr);		
000164  e28d0010          ADD      r0,sp,#0x10
000168  ebfffffe          BL       eth_get_addr
;;;73     	ip_init(give_ip);
00016c  e59d001c          LDR      r0,[sp,#0x1c]
000170  ebfffffe          BL       ip_init
;;;74     	udp_init();
000174  ebfffffe          BL       udp_init
;;;75     		
;;;76     	
;;;77     	arp_add_entry(eth_addr, give_ip);	
000178  e59d101c          LDR      r1,[sp,#0x1c]
00017c  e28d0010          ADD      r0,sp,#0x10
000180  ebfffffe          BL       arp_add_entry
;;;78     	
;;;79     	
;;;80     
;;;81     		net_handle();
000184  ebfffffe          BL       net_handle
;;;82     		//change data p
;;;83     		udp_skb_reserve(skb);
000188  e1a00005          MOV      r0,r5
00018c  ebfffffe          BL       udp_skb_reserve
;;;84     		(*skb->data) = 'l';
000190  e3a0006c          MOV      r0,#0x6c
000194  e59515f0          LDR      r1,[r5,#0x5f0]
000198  e5c10000          STRB     r0,[r1,#0]
;;;85     		
;;;86     		uart_printf("udp send pad: %s\n",skb->pad);
00019c  e1a01005          MOV      r1,r5
0001a0  e28f0f86          ADR      r0,|L1.960|
0001a4  ebfffffe          BL       uart_printf
;;;87     		uart_printf("udp send buf: %s\n",skb->buf);
0001a8  e2851002          ADD      r1,r5,#2
0001ac  e28f0e22          ADR      r0,|L1.980|
0001b0  ebfffffe          BL       uart_printf
;;;88     		uart_printf("udp send truesize: %d\n",skb->truesize);
0001b4  e28f0f8b          ADR      r0,|L1.1000|
0001b8  e59515ec          LDR      r1,[r5,#0x5ec]
0001bc  ebfffffe          BL       uart_printf
;;;89     		uart_printf("udp send data: %s\n",skb->data);
0001c0  e28f0f8e          ADR      r0,|L1.1024|
0001c4  e59515f0          LDR      r1,[r5,#0x5f0]
0001c8  ebfffffe          BL       uart_printf
;;;90     		uart_printf("udp send len: %d\n\n",skb->len);
0001cc  e28f0d09          ADR      r0,|L1.1044|
0001d0  e59515f4          LDR      r1,[r5,#0x5f4]
0001d4  ebfffffe          BL       uart_printf
;;;91     		udp_send(skb, 3232236098, UDP, 3538);	//192.168.2.66:3538
0001d8  e59f3248          LDR      r3,|L1.1064|
0001dc  e3a02011          MOV      r2,#0x11
0001e0  e59f1244          LDR      r1,|L1.1068|
0001e4  e1a00005          MOV      r0,r5
0001e8  ebfffffe          BL       udp_send
;;;92     		
;;;93                
;;;94     	uart_printf("\n Display current Date and time: \n");
0001ec  e28f0f8f          ADR      r0,|L1.1072|
0001f0  ebfffffe          BL       uart_printf
;;;95     
;;;96     	rRTCCON = 0x01;					// No reset, Merge BCD counters, 1/32768, RTC Control enable
0001f4  e3a00001          MOV      r0,#1
0001f8  e3a01457          MOV      r1,#0x57000000
0001fc  e5c10040          STRB     r0,[r1,#0x40]
;;;97     	uart_printf(" Press any key to exit.\n");
000200  e28f0f93          ADR      r0,|L1.1108|
000204  ebfffffe          BL       uart_printf
;;;98     
;;;99                 g_nYear =rBCDYEAR;
000208  e3a00457          MOV      r0,#0x57000000
00020c  e5d00088          LDRB     r0,[r0,#0x88]
000210  e59f1258          LDR      r1,|L1.1136|
000214  e5810000          STR      r0,[r1,#0]  ; g_nYear
;;;100    
;;;101                g_nMonth   = rBCDMON;
000218  e3a00457          MOV      r0,#0x57000000
00021c  e5d00084          LDRB     r0,[r0,#0x84]
000220  e59f124c          LDR      r1,|L1.1140|
000224  e5810000          STR      r0,[r1,#0]  ; g_nMonth
;;;102                g_nWeekday = rBCDDAY;
000228  e3a00457          MOV      r0,#0x57000000
00022c  e5d00080          LDRB     r0,[r0,#0x80]
000230  e59f1240          LDR      r1,|L1.1144|
000234  e5810000          STR      r0,[r1,#0]  ; g_nWeekday
;;;103                g_nDate    = rBCDDATE;
000238  e3a00457          MOV      r0,#0x57000000
00023c  e5d0007c          LDRB     r0,[r0,#0x7c]
000240  e59f1234          LDR      r1,|L1.1148|
000244  e5810000          STR      r0,[r1,#0]  ; g_nDate
;;;104                g_nHour    = rBCDHOUR;
000248  e3a00457          MOV      r0,#0x57000000
00024c  e5d00078          LDRB     r0,[r0,#0x78]
000250  e59f1228          LDR      r1,|L1.1152|
000254  e5810000          STR      r0,[r1,#0]  ; g_nHour
;;;105                g_nMin     = rBCDMIN;
000258  e3a00457          MOV      r0,#0x57000000
00025c  e5d00074          LDRB     r0,[r0,#0x74]
000260  e59f121c          LDR      r1,|L1.1156|
000264  e5810000          STR      r0,[r1,#0]  ; g_nMin
;;;106                g_nSec     = rBCDSEC;
000268  e3a00457          MOV      r0,#0x57000000
00026c  e5d00070          LDRB     r0,[r0,#0x70]
000270  e59f1210          LDR      r1,|L1.1160|
000274  e5810000          STR      r0,[r1,#0]  ; g_nSec
;;;107           
;;;108            uart_printf(" %02x:%02x:%02x  %10s,  %02x/%02x/%04x\r",g_nHour,g_nMin,g_nSec,day[g_nWeekday],g_nMonth,g_nDate,g_nYear);
000278  e59f01f0          LDR      r0,|L1.1136|
00027c  e5901000          LDR      r1,[r0,#0]  ; g_nYear
000280  e59f01f4          LDR      r0,|L1.1148|
000284  e5902000          LDR      r2,[r0,#0]  ; g_nDate
000288  e59f01e4          LDR      r0,|L1.1140|
00028c  e5903000          LDR      r3,[r0,#0]  ; g_nMonth
000290  e59f01f4          LDR      r0,|L1.1164|
000294  e59fc1dc          LDR      r12,|L1.1144|
000298  e59cc000          LDR      r12,[r12,#0]  ; g_nWeekday
00029c  e790010c          LDR      r0,[r0,r12,LSL #2]
0002a0  e88d0009          STM      sp,{r0,r3}
0002a4  e59f01dc          LDR      r0,|L1.1160|
0002a8  e58d100c          STR      r1,[sp,#0xc]
0002ac  e58d2008          STR      r2,[sp,#8]
0002b0  e5903000          LDR      r3,[r0,#0]  ; g_nSec
0002b4  e59f01c8          LDR      r0,|L1.1156|
0002b8  e5902000          LDR      r2,[r0,#0]  ; g_nMin
0002bc  e59f01bc          LDR      r0,|L1.1152|
0002c0  e5901000          LDR      r1,[r0,#0]  ; g_nHour
0002c4  e28f0f71          ADR      r0,|L1.1168|
0002c8  ebfffffe          BL       uart_printf
;;;109    
;;;110    	rRTCCON = 0x0;					// No reset, Merge BCD counters, 1/32768, RTC Control disable(for power consumption)
0002cc  e3a00000          MOV      r0,#0
0002d0  e3a01457          MOV      r1,#0x57000000
0002d4  e5c10040          STRB     r0,[r1,#0x40]
;;;111        
;;;112        uart_printf("\n\n Exit display.\n");
0002d8  e28f0f76          ADR      r0,|L1.1208|
0002dc  ebfffffe          BL       uart_printf
;;;113    	 
;;;114    		net_handle();
0002e0  ebfffffe          BL       net_handle
;;;115    		time_skb_reserve(skb);
0002e4  e1a00005          MOV      r0,r5
0002e8  ebfffffe          BL       time_skb_reserve
;;;116    		time_send(skb, g_nYear,g_nMonth,g_nDate,g_nWeekday,g_nHour,g_nMin,g_nSec);	//192.168.2.66:3538
0002ec  e59f0194          LDR      r0,|L1.1160|
0002f0  e5902000          LDR      r2,[r0,#0]  ; g_nSec
0002f4  e59f0188          LDR      r0,|L1.1156|
0002f8  e5900000          LDR      r0,[r0,#0]  ; g_nMin
0002fc  e59f117c          LDR      r1,|L1.1152|
000300  e5911000          LDR      r1,[r1,#0]  ; g_nHour
000304  e59f316c          LDR      r3,|L1.1144|
000308  e5933000          LDR      r3,[r3,#0]  ; g_nWeekday
00030c  e58d0008          STR      r0,[sp,#8]
000310  e58d200c          STR      r2,[sp,#0xc]
000314  e59f0160          LDR      r0,|L1.1148|
000318  e58d1004          STR      r1,[sp,#4]
00031c  e58d3000          STR      r3,[sp,#0]
000320  e5903000          LDR      r3,[r0,#0]  ; g_nDate
000324  e59f0148          LDR      r0,|L1.1140|
000328  e5902000          LDR      r2,[r0,#0]  ; g_nMonth
00032c  e59f013c          LDR      r0,|L1.1136|
000330  e5901000          LDR      r1,[r0,#0]  ; g_nYear
000334  e1a00005          MOV      r0,r5
000338  ebfffffe          BL       time_send
;;;117    	
;;;118    /*	TftpLoadEnd  = 0;
;;;119    	TftpPutMark  = 0;
;;;120    	TftpPutBegin = 0;
;;;121    	
;;;122    	download_addr = 0x30008000;
;;;123    	download_len = 0;
;;;124    	
;;;125    	while (!TftpLoadEnd) {		
;;;126    		net_handle();
;;;127    		if(TftpPutBegin) {
;;;128    			uart_printf("Starting the TFTP download...\n");
;;;129    			TftpPutBegin = 0;
;;;130    		}
;;;131    		if(TftpPutMark) {
;;;132    			uart_sendbyte('.');
;;;133    			TftpPutMark = 0;
;;;134    		}
;;;135    	}
;;;136    
;;;137    	if(TftpLoadEnd) {
;;;138    		uart_printf("\ndownload 0x%x bytes to 0x%08x\n\n", download_len, download_addr);
;;;139    	p=(char *)download_addr;
;;;140    	for(i=0;i<download_len;i++)
;;;141    		uart_printf("%c",p[i]);
;;;142        uart_printf("\nPress any key to continue...\n");
;;;143        while(!uart_getkey());
;;;144    	return download_len;
;;;145    	}*/
;;;146    
;;;147    	return 0;
00033c  e3a00000          MOV      r0,#0
000340  e28dd028          ADD      sp,sp,#0x28
000344  e8bd41f0          POP      {r4-r8,lr}
;;;148    }
000348  e12fff1e          BX       lr
                  |L1.844|
                          DCD      0x000005ea
                  |L1.848|
                          DCD      0xc0a8026f
                  |L1.852|
000354  4d696e69          DCB      "Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n",0
000358  20544654
00035c  50205365
000360  72766572
000364  20312e30
000368  20284950
00036c  203a2025
000370  642e2564
000374  2e25642e
000378  25642050
00037c  4f52543a
000380  20256429
000384  0a00    
000386  00                DCB      0
000387  00                DCB      0
                  |L1.904|
000388  54797065          DCB      "Type tftp -i %d.%d.%d.%d put filename at the host PC\n",0
00038c  20746674
000390  70202d69
000394  2025642e
000398  25642e25
00039c  642e2564
0003a0  20707574
0003a4  2066696c
0003a8  656e616d
0003ac  65206174
0003b0  20746865
0003b4  20686f73
0003b8  74205043
0003bc  0a00    
0003be  00                DCB      0
0003bf  00                DCB      0
                  |L1.960|
0003c0  75647020          DCB      "udp send pad: %s\n",0
0003c4  73656e64
0003c8  20706164
0003cc  3a202573
0003d0  0a00    
0003d2  00                DCB      0
0003d3  00                DCB      0
                  |L1.980|
0003d4  75647020          DCB      "udp send buf: %s\n",0
0003d8  73656e64
0003dc  20627566
0003e0  3a202573
0003e4  0a00    
0003e6  00                DCB      0
0003e7  00                DCB      0
                  |L1.1000|
0003e8  75647020          DCB      "udp send truesize: %d\n",0
0003ec  73656e64
0003f0  20747275
0003f4  6573697a
0003f8  653a2025
0003fc  640a00  
0003ff  00                DCB      0
                  |L1.1024|
000400  75647020          DCB      "udp send data: %s\n",0
000404  73656e64
000408  20646174
00040c  613a2025
000410  730a00  
000413  00                DCB      0
                  |L1.1044|
000414  75647020          DCB      "udp send len: %d\n\n",0
000418  73656e64
00041c  206c656e
000420  3a202564
000424  0a0a00  
000427  00                DCB      0
                  |L1.1064|
                          DCD      0x00000dd2
                  |L1.1068|
                          DCD      0xc0a80242
                  |L1.1072|
000430  0a204469          DCB      "\n Display current Date and time: \n",0
000434  73706c61
000438  79206375
00043c  7272656e
000440  74204461
000444  74652061
000448  6e642074
00044c  696d653a
000450  200a00  
000453  00                DCB      0
                  |L1.1108|
000454  20507265          DCB      " Press any key to exit.\n",0
000458  73732061
00045c  6e79206b
000460  65792074
000464  6f206578
000468  69742e0a
00046c  00      
00046d  00                DCB      0
00046e  00                DCB      0
00046f  00                DCB      0
                  |L1.1136|
                          DCD      g_nYear
                  |L1.1140|
                          DCD      g_nMonth
                  |L1.1144|
                          DCD      g_nWeekday
                  |L1.1148|
                          DCD      g_nDate
                  |L1.1152|
                          DCD      g_nHour
                  |L1.1156|
                          DCD      g_nMin
                  |L1.1160|
                          DCD      g_nSec
                  |L1.1164|
                          DCD      ||day||
                  |L1.1168|
000490  20253032          DCB      " %02x:%02x:%02x  %10s,  %02x/%02x/%04x\r",0
000494  783a2530
000498  32783a25
00049c  30327820
0004a0  20253130
0004a4  732c2020
0004a8  25303278
0004ac  2f253032
0004b0  782f2530
0004b4  34780d00
                  |L1.1208|
0004b8  0a0a2045          DCB      "\n\n Exit display.\n",0
0004bc  78697420
0004c0  64697370
0004c4  6c61792e
0004c8  0a00    
0004ca  00                DCB      0
0004cb  00                DCB      0
                          ENDP


                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  2000              DCB      " ",0
000002  53554e00          DCB      "SUN",0
000006  4d4f4e00          DCB      "MON",0
00000a  54554500          DCB      "TUE",0
00000e  57454400          DCB      "WED",0
000012  54485200          DCB      "THR",0
000016  46524900          DCB      "FRI",0
00001a  53415400          DCB      "SAT",0

                          AREA ||.data||, DATA, ALIGN=2

                  ||day||
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x2
                          DCD      ||.conststring||+0x6
                          DCD      ||.conststring||+0xa
                          DCD      ||.conststring||+0xe
                          DCD      ||.conststring||+0x12
                          DCD      ||.conststring||+0x16
                          DCD      ||.conststring||+0x1a
                  data
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  g_nYear
                          DCD      0x00000000
                  g_nMonth
                          DCD      0x00000000
                  g_nDate
                          DCD      0x00000000
                  g_nWeekday
                          DCD      0x00000000
                  g_nHour
                          DCD      0x00000000
                  g_nMin
                          DCD      0x00000000
                  g_nSec
                          DCD      0x00000000
                  TftpLoadEnd
000040  00                DCB      0x00
                  TftpPutBegin
000041  00                DCB      0x00
                  TftpPutMark
000042  00                DCB      0x00
