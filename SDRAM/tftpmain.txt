; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\tftpmain.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\tftpmain.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\tftpmain.crf Source\tftp\tftpmain.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ntohs PROC
;;;3      
;;;4      unsigned short ntohs(unsigned short s)
000000  e1a01000          MOV      r1,r0
;;;5      {
;;;6      	return (s >> 8) | (s << 8);
000004  e1a00441          ASR      r0,r1,#8
000008  e1800401          ORR      r0,r0,r1,LSL #8
00000c  e3c008ff          BIC      r0,r0,#0xff0000
;;;7      }
000010  e12fff1e          BX       lr
;;;8      
                          ENDP

                  ntohl PROC
;;;9      unsigned long ntohl(unsigned long l)
000014  e1a01000          MOV      r1,r0
;;;10     {
;;;11     	return  ((l >> 24) & 0x000000ff) |
000018  e3a02cff          MOV      r2,#0xff00
00001c  e0022421          AND      r2,r2,r1,LSR #8
000020  e1820c21          ORR      r0,r2,r1,LSR #24
000024  e3a028ff          MOV      r2,#0xff0000
000028  e0022401          AND      r2,r2,r1,LSL #8
00002c  e1800002          ORR      r0,r0,r2
000030  e3a024ff          MOV      r2,#0xff000000
000034  e0022c01          AND      r2,r2,r1,LSL #24
000038  e1800002          ORR      r0,r0,r2
;;;12     		((l >>  8) & 0x0000ff00) |
;;;13     		((l <<  8) & 0x00ff0000) |
;;;14     		((l << 24) & 0xff000000);
;;;15     }
00003c  e12fff1e          BX       lr
;;;16     
                          ENDP

                  htons PROC
;;;17     unsigned short htons(unsigned short s)
000040  e1a01000          MOV      r1,r0
;;;18     {
;;;19     	return (s >> 8) | (s << 8);
000044  e1a00441          ASR      r0,r1,#8
000048  e1800401          ORR      r0,r0,r1,LSL #8
00004c  e3c008ff          BIC      r0,r0,#0xff0000
;;;20     }
000050  e12fff1e          BX       lr
;;;21     
                          ENDP

                  htonl PROC
;;;22     unsigned long htonl(unsigned long l)
000054  e52de004          PUSH     {lr}
;;;23     {
000058  e1a03000          MOV      r3,r0
;;;24     	return ntohl(l);
00005c  e1a00003          MOV      r0,r3
000060  ebfffffe          BL       ntohl
000064  e49de004          POP      {lr}
;;;25     }
000068  e12fff1e          BX       lr
;;;26     
                          ENDP

                  net_handle PROC
;;;17     
;;;18     int net_handle(struct sk_buff *skbh)
00006c  e92d4070          PUSH     {r4-r6,lr}
;;;19     {
000070  e1a06000          MOV      r6,r0
;;;20     	struct sk_buff *skb;
;;;21     	struct ethhdr *eth_hdr;												
;;;22     	skb = alloc_skb(ETH_FRAME_LEN);
000074  e59f02f8          LDR      r0,|L1.884|
000078  ebfffffe          BL       alloc_skb
00007c  e1a05000          MOV      r5,r0
;;;23     
;;;24     	if (eth_rcv(skb) != -1) 
000080  e1a00005          MOV      r0,r5
000084  ebfffffe          BL       eth_rcv
000088  e3700001          CMN      r0,#1
00008c  0a000015          BEQ      |L1.232|
;;;25     	{
;;;26     
;;;27     		eth_hdr = (struct ethhdr *)(skb->data);					
000090  e59545f0          LDR      r4,[r5,#0x5f0]
;;;28     		skb_pull(skb, ETH_HLEN);
000094  e3a0100e          MOV      r1,#0xe
000098  e1a00005          MOV      r0,r5
00009c  ebfffffe          BL       skb_pull
;;;29     		if (ntohs(eth_hdr->h_proto) == ETH_P_ARP)
0000a0  e5d4100d          LDRB     r1,[r4,#0xd]
0000a4  e5d4200c          LDRB     r2,[r4,#0xc]
0000a8  e1820401          ORR      r0,r2,r1,LSL #8
0000ac  ebfffffe          BL       ntohs
0000b0  e2401b02          SUB      r1,r0,#0x800
0000b4  e2511006          SUBS     r1,r1,#6
0000b8  1a000002          BNE      |L1.200|
;;;30     		{
;;;31     			arp_rcv_packet(skb);
0000bc  e1a00005          MOV      r0,r5
0000c0  ebfffffe          BL       arp_rcv_packet
0000c4  ea000007          B        |L1.232|
                  |L1.200|
;;;32     
;;;33     		}
;;;34     
;;;35     		else if(ntohs(eth_hdr->h_proto) == ETH_P_IP)						
0000c8  e5d4100d          LDRB     r1,[r4,#0xd]
0000cc  e5d4200c          LDRB     r2,[r4,#0xc]
0000d0  e1820401          ORR      r0,r2,r1,LSL #8
0000d4  ebfffffe          BL       ntohs
0000d8  e3500b02          CMP      r0,#0x800
0000dc  1a000001          BNE      |L1.232|
;;;36     		{
;;;37     
;;;38     		 	ip_rcv_packet(skb);
0000e0  e1a00005          MOV      r0,r5
0000e4  ebfffffe          BL       ip_rcv_packet
                  |L1.232|
;;;39     
;;;40     		}
;;;41     	 	
;;;42     	}
;;;43     
;;;44     	free_skb(skb);
0000e8  e1a00005          MOV      r0,r5
0000ec  ebfffffe          BL       free_skb
;;;45     
;;;46     	udp_skb_reserve(skbh);
0000f0  e1a00006          MOV      r0,r6
0000f4  ebfffffe          BL       udp_skb_reserve
;;;47     	(*skbh->data) = 'l';
0000f8  e3a0006c          MOV      r0,#0x6c
0000fc  e59615f0          LDR      r1,[r6,#0x5f0]
000100  e5c10000          STRB     r0,[r1,#0]
;;;48     	udp_send(skbh, 3232236098, UDP, 3538);	//192.168.2.66:3538 
000104  e59f326c          LDR      r3,|L1.888|
000108  e3a02011          MOV      r2,#0x11
00010c  e59f1268          LDR      r1,|L1.892|
000110  e1a00006          MOV      r0,r6
000114  ebfffffe          BL       udp_send
;;;49     	
;;;50     	skb = alloc_skb(ETH_FRAME_LEN);
000118  e59f0254          LDR      r0,|L1.884|
00011c  ebfffffe          BL       alloc_skb
000120  e1a05000          MOV      r5,r0
;;;51     
;;;52     	if (eth_rcv(skb) != -1) 
000124  e1a00005          MOV      r0,r5
000128  ebfffffe          BL       eth_rcv
00012c  e3700001          CMN      r0,#1
000130  0a000015          BEQ      |L1.396|
;;;53     	{
;;;54     
;;;55     		eth_hdr = (struct ethhdr *)(skb->data);					
000134  e59545f0          LDR      r4,[r5,#0x5f0]
;;;56     		skb_pull(skb, ETH_HLEN);
000138  e3a0100e          MOV      r1,#0xe
00013c  e1a00005          MOV      r0,r5
000140  ebfffffe          BL       skb_pull
;;;57     		if (ntohs(eth_hdr->h_proto) == ETH_P_ARP)
000144  e5d4100d          LDRB     r1,[r4,#0xd]
000148  e5d4200c          LDRB     r2,[r4,#0xc]
00014c  e1820401          ORR      r0,r2,r1,LSL #8
000150  ebfffffe          BL       ntohs
000154  e2401b02          SUB      r1,r0,#0x800
000158  e2511006          SUBS     r1,r1,#6
00015c  1a000002          BNE      |L1.364|
;;;58     		{
;;;59     			arp_rcv_packet(skb);
000160  e1a00005          MOV      r0,r5
000164  ebfffffe          BL       arp_rcv_packet
000168  ea000007          B        |L1.396|
                  |L1.364|
;;;60     
;;;61     		}
;;;62     
;;;63     		else if(ntohs(eth_hdr->h_proto) == ETH_P_IP)						
00016c  e5d4100d          LDRB     r1,[r4,#0xd]
000170  e5d4200c          LDRB     r2,[r4,#0xc]
000174  e1820401          ORR      r0,r2,r1,LSL #8
000178  ebfffffe          BL       ntohs
00017c  e3500b02          CMP      r0,#0x800
000180  1a000001          BNE      |L1.396|
;;;64     		{
;;;65     
;;;66     		 	ip_rcv_packet(skb);
000184  e1a00005          MOV      r0,r5
000188  ebfffffe          BL       ip_rcv_packet
                  |L1.396|
;;;67     
;;;68     		}
;;;69     	 	
;;;70     	}
;;;71     
;;;72     	free_skb(skb);
00018c  e1a00005          MOV      r0,r5
000190  ebfffffe          BL       free_skb
;;;73     	return 0;
000194  e3a00000          MOV      r0,#0
000198  e8bd4070          POP      {r4-r6,lr}
;;;74     }
00019c  e12fff1e          BX       lr
;;;75     
                          ENDP

                  NetLoadFile PROC
;;;84     
;;;85     int NetLoadFile(UINT32T addr, UINT32T give_ip, UINT32T a3, UINT32T a4)
0001a0  e92d41ff          PUSH     {r0-r8,lr}
;;;86     {
0001a4  e24dd018          SUB      sp,sp,#0x18
0001a8  e1a06000          MOV      r6,r0
0001ac  e1a07002          MOV      r7,r2
0001b0  e1a08003          MOV      r8,r3
;;;87     	struct sk_buff *skb = alloc_skb(ETH_FRAME_LEN);
0001b4  e59f01b8          LDR      r0,|L1.884|
0001b8  ebfffffe          BL       alloc_skb
0001bc  e1a05000          MOV      r5,r0
;;;88     	unsigned char eth_addr[ETH_ALEN];	
;;;89     	unsigned char *s;
;;;90     	int i;
;;;91     	unsigned char *p;
;;;92     	give_ip = LOCAL_IP_ADDR;
0001c0  e59f01b8          LDR      r0,|L1.896|
0001c4  e58d001c          STR      r0,[sp,#0x1c]
;;;93     	s = (unsigned char *)&give_ip;
0001c8  e28d401c          ADD      r4,sp,#0x1c
;;;94     	
;;;95     	uart_printf("Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n", s[3], s[2], s[1], s[0], TFTP);		
0001cc  e3a01045          MOV      r1,#0x45
0001d0  e5d40000          LDRB     r0,[r4,#0]
0001d4  e88d0003          STM      sp,{r0,r1}
0001d8  e5d43001          LDRB     r3,[r4,#1]
0001dc  e5d42002          LDRB     r2,[r4,#2]
0001e0  e5d41003          LDRB     r1,[r4,#3]
0001e4  e28f0f66          ADR      r0,|L1.900|
0001e8  ebfffffe          BL       uart_printf
;;;96     	uart_printf("Type tftp -i %d.%d.%d.%d put filename at the host PC\n", s[3], s[2], s[1], s[0]);
0001ec  e5d40000          LDRB     r0,[r4,#0]
0001f0  e58d0000          STR      r0,[sp,#0]
0001f4  e5d43001          LDRB     r3,[r4,#1]
0001f8  e5d42002          LDRB     r2,[r4,#2]
0001fc  e5d41003          LDRB     r1,[r4,#3]
000200  e28f0e1b          ADR      r0,|L1.952|
000204  ebfffffe          BL       uart_printf
;;;97     
;;;98     	eth_init();		
000208  ebfffffe          BL       eth_init
;;;99     	eth_get_addr(eth_addr);		
00020c  e28d0010          ADD      r0,sp,#0x10
000210  ebfffffe          BL       eth_get_addr
;;;100    	ip_init(give_ip);
000214  e59d001c          LDR      r0,[sp,#0x1c]
000218  ebfffffe          BL       ip_init
;;;101    	udp_init();
00021c  ebfffffe          BL       udp_init
;;;102    		
;;;103    	
;;;104    	arp_add_entry(eth_addr, give_ip);	
000220  e59d101c          LDR      r1,[sp,#0x1c]
000224  e28d0010          ADD      r0,sp,#0x10
000228  ebfffffe          BL       arp_add_entry
;;;105    
;;;106    	rRTCCON = 0x01;					// No reset, Merge BCD counters, 1/32768, RTC Control enable
00022c  e3a00001          MOV      r0,#1
000230  e3a01457          MOV      r1,#0x57000000
000234  e5c10040          STRB     r0,[r1,#0x40]
;;;107    	g_nYear =rBCDYEAR;
000238  e3a00457          MOV      r0,#0x57000000
00023c  e5d00088          LDRB     r0,[r0,#0x88]
000240  e59f11a8          LDR      r1,|L1.1008|
000244  e5810000          STR      r0,[r1,#0]  ; g_nYear
;;;108    	g_nMonth   = rBCDMON;
000248  e3a00457          MOV      r0,#0x57000000
00024c  e5d00084          LDRB     r0,[r0,#0x84]
000250  e59f119c          LDR      r1,|L1.1012|
000254  e5810000          STR      r0,[r1,#0]  ; g_nMonth
;;;109    	g_nWeekday = rBCDDAY;
000258  e3a00457          MOV      r0,#0x57000000
00025c  e5d00080          LDRB     r0,[r0,#0x80]
000260  e59f1190          LDR      r1,|L1.1016|
000264  e5810000          STR      r0,[r1,#0]  ; g_nWeekday
;;;110    	g_nDate    = rBCDDATE;
000268  e3a00457          MOV      r0,#0x57000000
00026c  e5d0007c          LDRB     r0,[r0,#0x7c]
000270  e59f1184          LDR      r1,|L1.1020|
000274  e5810000          STR      r0,[r1,#0]  ; g_nDate
;;;111    	g_nHour    = rBCDHOUR;
000278  e3a00457          MOV      r0,#0x57000000
00027c  e5d00078          LDRB     r0,[r0,#0x78]
000280  e59f1178          LDR      r1,|L1.1024|
000284  e5810000          STR      r0,[r1,#0]  ; g_nHour
;;;112    	g_nMin     = rBCDMIN;
000288  e3a00457          MOV      r0,#0x57000000
00028c  e5d00074          LDRB     r0,[r0,#0x74]
000290  e59f116c          LDR      r1,|L1.1028|
000294  e5810000          STR      r0,[r1,#0]  ; g_nMin
;;;113    	g_nSec     = rBCDSEC;
000298  e3a00457          MOV      r0,#0x57000000
00029c  e5d00070          LDRB     r0,[r0,#0x70]
0002a0  e59f1160          LDR      r1,|L1.1032|
0002a4  e5810000          STR      r0,[r1,#0]  ; g_nSec
;;;114      uart_printf(" %02x:%02x:%02x  %10s,  %02x/%02x/%04x\r",g_nHour,g_nMin,g_nSec,day[g_nWeekday],g_nMonth,g_nDate,g_nYear);
0002a8  e59f0140          LDR      r0,|L1.1008|
0002ac  e5901000          LDR      r1,[r0,#0]  ; g_nYear
0002b0  e59f0144          LDR      r0,|L1.1020|
0002b4  e5902000          LDR      r2,[r0,#0]  ; g_nDate
0002b8  e59f0134          LDR      r0,|L1.1012|
0002bc  e5903000          LDR      r3,[r0,#0]  ; g_nMonth
0002c0  e59f0144          LDR      r0,|L1.1036|
0002c4  e59fc12c          LDR      r12,|L1.1016|
0002c8  e59cc000          LDR      r12,[r12,#0]  ; g_nWeekday
0002cc  e790010c          LDR      r0,[r0,r12,LSL #2]
0002d0  e88d0009          STM      sp,{r0,r3}
0002d4  e59f012c          LDR      r0,|L1.1032|
0002d8  e58d100c          STR      r1,[sp,#0xc]
0002dc  e58d2008          STR      r2,[sp,#8]
0002e0  e5903000          LDR      r3,[r0,#0]  ; g_nSec
0002e4  e59f0118          LDR      r0,|L1.1028|
0002e8  e5902000          LDR      r2,[r0,#0]  ; g_nMin
0002ec  e59f010c          LDR      r0,|L1.1024|
0002f0  e5901000          LDR      r1,[r0,#0]  ; g_nHour
0002f4  e28f0f45          ADR      r0,|L1.1040|
0002f8  ebfffffe          BL       uart_printf
;;;115    	rRTCCON = 0x0;					// No reset, Merge BCD counters, 1/32768, RTC Control disable(for power consumption)
0002fc  e3a00000          MOV      r0,#0
000300  e3a01457          MOV      r1,#0x57000000
000304  e5c10040          STRB     r0,[r1,#0x40]
;;;116    	 
;;;117    	net_handle(skb);
000308  e1a00005          MOV      r0,r5
00030c  ebfffffe          BL       net_handle
;;;118    	time_skb_reserve(skb);
000310  e1a00005          MOV      r0,r5
000314  ebfffffe          BL       time_skb_reserve
;;;119    	time_send(skb, g_nYear,g_nMonth,g_nDate,g_nWeekday,g_nHour,g_nMin,g_nSec);	//192.168.2.66:3538
000318  e59f00e8          LDR      r0,|L1.1032|
00031c  e5900000          LDR      r0,[r0,#0]  ; g_nSec
000320  e59f10dc          LDR      r1,|L1.1028|
000324  e5912000          LDR      r2,[r1,#0]  ; g_nMin
000328  e59f10d0          LDR      r1,|L1.1024|
00032c  e5911000          LDR      r1,[r1,#0]  ; g_nHour
000330  e59f30c0          LDR      r3,|L1.1016|
000334  e5933000          LDR      r3,[r3,#0]  ; g_nWeekday
000338  e58d000c          STR      r0,[sp,#0xc]
00033c  e59f00b8          LDR      r0,|L1.1020|
000340  e98d0006          STMIB    sp,{r1,r2}
000344  e58d3000          STR      r3,[sp,#0]
000348  e5903000          LDR      r3,[r0,#0]  ; g_nDate
00034c  e59f00a0          LDR      r0,|L1.1012|
000350  e5902000          LDR      r2,[r0,#0]  ; g_nMonth
000354  e59f0094          LDR      r0,|L1.1008|
000358  e5901000          LDR      r1,[r0,#0]  ; g_nYear
00035c  e1a00005          MOV      r0,r5
000360  ebfffffe          BL       time_send
;;;120    	
;;;121    	return 0;
000364  e3a00000          MOV      r0,#0
000368  e28dd028          ADD      sp,sp,#0x28
00036c  e8bd41f0          POP      {r4-r8,lr}
;;;122    }
000370  e12fff1e          BX       lr
;;;123    
                          ENDP

                  |L1.884|
                          DCD      0x000005ea
                  |L1.888|
                          DCD      0x00000dd2
                  |L1.892|
                          DCD      0xc0a80242
                  |L1.896|
                          DCD      0xc0a8026f
                  |L1.900|
000384  4d696e69          DCB      "Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n",0
000388  20544654
00038c  50205365
000390  72766572
000394  20312e30
000398  20284950
00039c  203a2025
0003a0  642e2564
0003a4  2e25642e
0003a8  25642050
0003ac  4f52543a
0003b0  20256429
0003b4  0a00    
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L1.952|
0003b8  54797065          DCB      "Type tftp -i %d.%d.%d.%d put filename at the host PC\n",0
0003bc  20746674
0003c0  70202d69
0003c4  2025642e
0003c8  25642e25
0003cc  642e2564
0003d0  20707574
0003d4  2066696c
0003d8  656e616d
0003dc  65206174
0003e0  20746865
0003e4  20686f73
0003e8  74205043
0003ec  0a00    
0003ee  00                DCB      0
0003ef  00                DCB      0
                  |L1.1008|
                          DCD      g_nYear
                  |L1.1012|
                          DCD      g_nMonth
                  |L1.1016|
                          DCD      g_nWeekday
                  |L1.1020|
                          DCD      g_nDate
                  |L1.1024|
                          DCD      g_nHour
                  |L1.1028|
                          DCD      g_nMin
                  |L1.1032|
                          DCD      g_nSec
                  |L1.1036|
                          DCD      ||day||
                  |L1.1040|
000410  20253032          DCB      " %02x:%02x:%02x  %10s,  %02x/%02x/%04x\r",0
000414  783a2530
000418  32783a25
00041c  30327820
000420  20253130
000424  732c2020
000428  25303278
00042c  2f253032
000430  782f2530
000434  34780d00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  2000              DCB      " ",0
000002  53554e00          DCB      "SUN",0
000006  4d4f4e00          DCB      "MON",0
00000a  54554500          DCB      "TUE",0
00000e  57454400          DCB      "WED",0
000012  54485200          DCB      "THR",0
000016  46524900          DCB      "FRI",0
00001a  53415400          DCB      "SAT",0

                          AREA ||.data||, DATA, ALIGN=2

                  ||day||
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x2
                          DCD      ||.conststring||+0x6
                          DCD      ||.conststring||+0xa
                          DCD      ||.conststring||+0xe
                          DCD      ||.conststring||+0x12
                          DCD      ||.conststring||+0x16
                          DCD      ||.conststring||+0x1a
                  data
000020  00000000          DCB      0x00,0x00,0x00,0x00
                  g_nYear
                          DCD      0x00000000
                  g_nMonth
                          DCD      0x00000000
                  g_nDate
                          DCD      0x00000000
                  g_nWeekday
                          DCD      0x00000000
                  g_nHour
                          DCD      0x00000000
                  g_nMin
                          DCD      0x00000000
                  g_nSec
                          DCD      0x00000000
                  TftpLoadEnd
000040  00                DCB      0x00
                  TftpPutBegin
000041  00                DCB      0x00
                  TftpPutMark
000042  00                DCB      0x00
