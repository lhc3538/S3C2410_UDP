; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\time.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\time.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\time.crf Source\tftp\time.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  time_init PROC
;;;9      
;;;10     int time_init(void)
000000  e3a00000          MOV      r0,#0
;;;11     {
;;;12     	return 0;
;;;13     }
000004  e12fff1e          BX       lr
;;;14     
                          ENDP

                  time_send PROC
;;;15     int time_send(struct sk_buff *skb, int g_nYear,int g_nMonth,
000008  e92d5fff          PUSH     {r0-r12,lr}
;;;16     	int g_nDate,int g_nWeekday,int g_nHour,int g_nMin,int g_nSec)
;;;17     {
00000c  e1a05001          MOV      r5,r1
000010  e1a06002          MOV      r6,r2
000014  e1a07003          MOV      r7,r3
000018  e28db038          ADD      r11,sp,#0x38
00001c  e89b0f00          LDM      r11,{r8-r11}
;;;18     	struct timehdr *time_hdr;
;;;19     
;;;20     	time_hdr = (struct timehdr *)skb_push(skb, sizeof(struct timehdr));
000020  e3a01008          MOV      r1,#8
000024  e59d0000          LDR      r0,[sp,#0]
000028  ebfffffe          BL       skb_push
00002c  e1a04000          MOV      r4,r0
;;;21     	time_hdr->time_data[0] = g_nHour;
000030  e5c49000          STRB     r9,[r4,#0]
;;;22     	time_hdr->time_data[1] = g_nMin;
000034  e5c4a001          STRB     r10,[r4,#1]
;;;23     	time_hdr->time_data[2] = g_nSec;
000038  e5c4b002          STRB     r11,[r4,#2]
;;;24     	time_hdr->time_data[3] = g_nWeekday;
00003c  e5c48003          STRB     r8,[r4,#3]
;;;25     	time_hdr->time_data[4] = g_nMonth;
000040  e5c46004          STRB     r6,[r4,#4]
;;;26     	time_hdr->time_data[5] = g_nDate;
000044  e5c47005          STRB     r7,[r4,#5]
;;;27     	time_hdr->time_data[6] = g_nYear;
000048  e5c45006          STRB     r5,[r4,#6]
;;;28     	uart_printf("year: %d\n",g_nYear);
00004c  e1a01005          MOV      r1,r5
000050  e28f0048          ADR      r0,|L1.160|
000054  ebfffffe          BL       uart_printf
;;;29     	udp_send(skb, 3232236098, UDP,3538);
000058  e59f304c          LDR      r3,|L1.172|
00005c  e3a02011          MOV      r2,#0x11
000060  e59f1048          LDR      r1,|L1.176|
000064  e59d0000          LDR      r0,[sp,#0]
000068  ebfffffe          BL       udp_send
;;;30     
;;;31     	return 0;
00006c  e3a00000          MOV      r0,#0
000070  e28dd010          ADD      sp,sp,#0x10
000074  e8bd5ff0          POP      {r4-r12,lr}
;;;32     }
000078  e12fff1e          BX       lr
;;;33     
                          ENDP

                  time_skb_reserve PROC
;;;34     void time_skb_reserve(struct sk_buff *skb)
00007c  e92d4010          PUSH     {r4,lr}
;;;35     {
000080  e1a04000          MOV      r4,r0
;;;36     	udp_skb_reserve(skb);
000084  e1a00004          MOV      r0,r4
000088  ebfffffe          BL       udp_skb_reserve
;;;37     	skb_reserve(skb, sizeof(struct timehdr));
00008c  e3a01008          MOV      r1,#8
000090  e1a00004          MOV      r0,r4
000094  ebfffffe          BL       skb_reserve
;;;38     }
000098  e8bd4010          POP      {r4,lr}
00009c  e12fff1e          BX       lr
;;;39     
                          ENDP

                  |L1.160|
0000a0  79656172          DCB      "year: %d\n",0
0000a4  3a202564
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L1.172|
                          DCD      0x00000dd2
                  |L1.176|
                          DCD      0xc0a80242
