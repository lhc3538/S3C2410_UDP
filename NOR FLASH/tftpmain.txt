; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o".\NOR FLASH\tftpmain.o" --asm_dir=".\NOR FLASH\\" --list_dir=".\NOR FLASH\\" --depend=".\NOR FLASH\tftpmain.d" --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\Inc -I.\Inc\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=".\NOR FLASH\tftpmain.crf" Source\tftp\tftpmain.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ntohs PROC
;;;3      
;;;4      unsigned short ntohs(unsigned short s)
000000  e1a01000          MOV      r1,r0
;;;5      {
;;;6      	return (s >> 8) | (s << 8);
000004  e1a00441          ASR      r0,r1,#8
000008  e1800401          ORR      r0,r0,r1,LSL #8
00000c  e3c008ff          BIC      r0,r0,#0xff0000
;;;7      }
000010  e12fff1e          BX       lr
;;;8      
                          ENDP

                  ntohl PROC
;;;9      unsigned long ntohl(unsigned long l)
000014  e1a01000          MOV      r1,r0
;;;10     {
;;;11     	return  ((l >> 24) & 0x000000ff) |
000018  e3a02cff          MOV      r2,#0xff00
00001c  e0022421          AND      r2,r2,r1,LSR #8
000020  e1820c21          ORR      r0,r2,r1,LSR #24
000024  e3a028ff          MOV      r2,#0xff0000
000028  e0022401          AND      r2,r2,r1,LSL #8
00002c  e1800002          ORR      r0,r0,r2
000030  e3a024ff          MOV      r2,#0xff000000
000034  e0022c01          AND      r2,r2,r1,LSL #24
000038  e1800002          ORR      r0,r0,r2
;;;12     		((l >>  8) & 0x0000ff00) |
;;;13     		((l <<  8) & 0x00ff0000) |
;;;14     		((l << 24) & 0xff000000);
;;;15     }
00003c  e12fff1e          BX       lr
;;;16     
                          ENDP

                  htons PROC
;;;17     unsigned short htons(unsigned short s)
000040  e1a01000          MOV      r1,r0
;;;18     {
;;;19     	return (s >> 8) | (s << 8);
000044  e1a00441          ASR      r0,r1,#8
000048  e1800401          ORR      r0,r0,r1,LSL #8
00004c  e3c008ff          BIC      r0,r0,#0xff0000
;;;20     }
000050  e12fff1e          BX       lr
;;;21     
                          ENDP

                  htonl PROC
;;;22     unsigned long htonl(unsigned long l)
000054  e52de004          PUSH     {lr}
;;;23     {
000058  e1a03000          MOV      r3,r0
;;;24     	return ntohl(l);
00005c  e1a00003          MOV      r0,r3
000060  ebfffffe          BL       ntohl
000064  e49de004          POP      {lr}
;;;25     }
000068  e12fff1e          BX       lr
;;;26     
                          ENDP

                  net_handle PROC
;;;13     
;;;14     int net_handle(void)
00006c  e92d4070          PUSH     {r4-r6,lr}
;;;15     {
;;;16     	struct sk_buff *skb;
;;;17     	struct ethhdr *eth_hdr;												
;;;18     	skb = alloc_skb(ETH_FRAME_LEN);
000070  e59f0220          LDR      r0,|L1.664|
000074  ebfffffe          BL       alloc_skb
000078  e1a05000          MOV      r5,r0
;;;19     
;;;20     	if (eth_rcv(skb) != -1) 
00007c  e1a00005          MOV      r0,r5
000080  ebfffffe          BL       eth_rcv
000084  e3700001          CMN      r0,#1
000088  0a000015          BEQ      |L1.228|
;;;21     	{
;;;22     
;;;23     		eth_hdr = (struct ethhdr *)(skb->data);					
00008c  e59545f0          LDR      r4,[r5,#0x5f0]
;;;24     		skb_pull(skb, ETH_HLEN);
000090  e3a0100e          MOV      r1,#0xe
000094  e1a00005          MOV      r0,r5
000098  ebfffffe          BL       skb_pull
;;;25     		if (ntohs(eth_hdr->h_proto) == ETH_P_ARP)
00009c  e5d4100d          LDRB     r1,[r4,#0xd]
0000a0  e5d4200c          LDRB     r2,[r4,#0xc]
0000a4  e1820401          ORR      r0,r2,r1,LSL #8
0000a8  ebfffffe          BL       ntohs
0000ac  e2401b02          SUB      r1,r0,#0x800
0000b0  e2511006          SUBS     r1,r1,#6
0000b4  1a000002          BNE      |L1.196|
;;;26     		{
;;;27     			arp_rcv_packet(skb);
0000b8  e1a00005          MOV      r0,r5
0000bc  ebfffffe          BL       arp_rcv_packet
0000c0  ea000007          B        |L1.228|
                  |L1.196|
;;;28     
;;;29     		}
;;;30     
;;;31     		else if(ntohs(eth_hdr->h_proto) == ETH_P_IP)						
0000c4  e5d4100d          LDRB     r1,[r4,#0xd]
0000c8  e5d4200c          LDRB     r2,[r4,#0xc]
0000cc  e1820401          ORR      r0,r2,r1,LSL #8
0000d0  ebfffffe          BL       ntohs
0000d4  e3500b02          CMP      r0,#0x800
0000d8  1a000001          BNE      |L1.228|
;;;32     		{
;;;33     
;;;34     		 	ip_rcv_packet(skb);
0000dc  e1a00005          MOV      r0,r5
0000e0  ebfffffe          BL       ip_rcv_packet
                  |L1.228|
;;;35     
;;;36     		}
;;;37     	 	
;;;38     	}
;;;39     
;;;40     	free_skb(skb);
0000e4  e1a00005          MOV      r0,r5
0000e8  ebfffffe          BL       free_skb
;;;41     
;;;42     	return 0;
0000ec  e3a00000          MOV      r0,#0
0000f0  e8bd4070          POP      {r4-r6,lr}
;;;43     }
0000f4  e12fff1e          BX       lr
;;;44     
                          ENDP

                  NetLoadFile PROC
;;;51     
;;;52     int NetLoadFile(UINT32T addr, UINT32T give_ip, UINT32T a3, UINT32T a4)
0000f8  e92d43ff          PUSH     {r0-r9,lr}
;;;53     {
0000fc  e24dd014          SUB      sp,sp,#0x14
000100  e1a07000          MOV      r7,r0
000104  e1a08002          MOV      r8,r2
000108  e1a09003          MOV      r9,r3
;;;54     	unsigned char eth_addr[ETH_ALEN];	
;;;55     	unsigned char *s;
;;;56     	int i;
;;;57     	char *p;
;;;58     	give_ip = LOCAL_IP_ADDR;
00010c  e59f0188          LDR      r0,|L1.668|
000110  e58d0018          STR      r0,[sp,#0x18]
;;;59     	s = (unsigned char *)&give_ip;
000114  e28d4018          ADD      r4,sp,#0x18
;;;60     	
;;;61     	uart_printf("Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n", s[3], s[2], s[1], s[0], TFTP);		
000118  e3a01045          MOV      r1,#0x45
00011c  e5d40000          LDRB     r0,[r4,#0]
000120  e88d0003          STM      sp,{r0,r1}
000124  e5d43001          LDRB     r3,[r4,#1]
000128  e5d42002          LDRB     r2,[r4,#2]
00012c  e5d41003          LDRB     r1,[r4,#3]
000130  e28f0f5a          ADR      r0,|L1.672|
000134  ebfffffe          BL       uart_printf
;;;62     	uart_printf("Type tftp -i %d.%d.%d.%d put filename at the host PC\n", s[3], s[2], s[1], s[0]);
000138  e5d40000          LDRB     r0,[r4,#0]
00013c  e58d0000          STR      r0,[sp,#0]
000140  e5d43001          LDRB     r3,[r4,#1]
000144  e5d42002          LDRB     r2,[r4,#2]
000148  e5d41003          LDRB     r1,[r4,#3]
00014c  e28f0d06          ADR      r0,|L1.724|
000150  ebfffffe          BL       uart_printf
;;;63     
;;;64     	eth_init();		
000154  ebfffffe          BL       eth_init
;;;65     	eth_get_addr(eth_addr);		
000158  e28d000c          ADD      r0,sp,#0xc
00015c  ebfffffe          BL       eth_get_addr
;;;66     	ip_init(give_ip);
000160  e59d0018          LDR      r0,[sp,#0x18]
000164  ebfffffe          BL       ip_init
;;;67     	udp_init();
000168  ebfffffe          BL       udp_init
;;;68     		
;;;69     	arp_add_entry(eth_addr, give_ip);	
00016c  e59d1018          LDR      r1,[sp,#0x18]
000170  e28d000c          ADD      r0,sp,#0xc
000174  ebfffffe          BL       arp_add_entry
;;;70     
;;;71     	TftpLoadEnd  = 0;
000178  e3a00000          MOV      r0,#0
00017c  e59f1188          LDR      r1,|L1.780|
000180  e5c10000          STRB     r0,[r1,#0]  ; TftpLoadEnd
;;;72     	TftpPutMark  = 0;
000184  e59f1184          LDR      r1,|L1.784|
000188  e5c10000          STRB     r0,[r1,#0]  ; TftpPutMark
;;;73     	TftpPutBegin = 0;
00018c  e59f1180          LDR      r1,|L1.788|
000190  e5c10000          STRB     r0,[r1,#0]  ; TftpPutBegin
;;;74     	
;;;75     	download_addr = 0x30008000;
000194  e59f017c          LDR      r0,|L1.792|
000198  e59f117c          LDR      r1,|L1.796|
00019c  e5810000          STR      r0,[r1,#0]  ; download_addr
;;;76     	download_len = 0;
0001a0  e3a00000          MOV      r0,#0
0001a4  e59f1174          LDR      r1,|L1.800|
0001a8  e5810000          STR      r0,[r1,#0]  ; download_len
;;;77     	
;;;78     	while (!TftpLoadEnd) {		
0001ac  ea000012          B        |L1.508|
                  |L1.432|
;;;79     		net_handle();
0001b0  ebfffffe          BL       net_handle
;;;80     		if(TftpPutBegin) {
0001b4  e59f0158          LDR      r0,|L1.788|
0001b8  e5d00000          LDRB     r0,[r0,#0]  ; TftpPutBegin
0001bc  e3500000          CMP      r0,#0
0001c0  0a000004          BEQ      |L1.472|
;;;81     			uart_printf("Starting the TFTP download...\n");
0001c4  e28f0f56          ADR      r0,|L1.804|
0001c8  ebfffffe          BL       uart_printf
;;;82     			TftpPutBegin = 0;
0001cc  e3a00000          MOV      r0,#0
0001d0  e59f113c          LDR      r1,|L1.788|
0001d4  e5c10000          STRB     r0,[r1,#0]  ; TftpPutBegin
                  |L1.472|
;;;83     		}
;;;84     		if(TftpPutMark) {
0001d8  e59f0130          LDR      r0,|L1.784|
0001dc  e5d00000          LDRB     r0,[r0,#0]  ; TftpPutMark
0001e0  e3500000          CMP      r0,#0
0001e4  0a000004          BEQ      |L1.508|
;;;85     			uart_sendbyte('.');
0001e8  e3a0002e          MOV      r0,#0x2e
0001ec  ebfffffe          BL       uart_sendbyte
;;;86     			TftpPutMark = 0;
0001f0  e3a00000          MOV      r0,#0
0001f4  e59f1114          LDR      r1,|L1.784|
0001f8  e5c10000          STRB     r0,[r1,#0]  ; TftpPutMark
                  |L1.508|
0001fc  e59f0108          LDR      r0,|L1.780|
000200  e5d00000          LDRB     r0,[r0,#0]            ;78  ; TftpLoadEnd
000204  e3500000          CMP      r0,#0                 ;78
000208  0affffe8          BEQ      |L1.432|
;;;87     		}
;;;88     	}
;;;89     
;;;90     	if(TftpLoadEnd) {
00020c  e59f00f8          LDR      r0,|L1.780|
000210  e5d00000          LDRB     r0,[r0,#0]  ; TftpLoadEnd
000214  e3500000          CMP      r0,#0
000218  0a00001c          BEQ      |L1.656|
;;;91     		uart_printf("\ndownload 0x%x bytes to 0x%08x\n\n", download_len, download_addr);
00021c  e59f00f8          LDR      r0,|L1.796|
000220  e5902000          LDR      r2,[r0,#0]  ; download_addr
000224  e59f00f4          LDR      r0,|L1.800|
000228  e5901000          LDR      r1,[r0,#0]  ; download_len
00022c  e28f0e11          ADR      r0,|L1.836|
000230  ebfffffe          BL       uart_printf
;;;92     	p=(char *)download_addr;
000234  e59f00e0          LDR      r0,|L1.796|
000238  e5906000          LDR      r6,[r0,#0]  ; download_addr
;;;93     	for(i=0;i<download_len;i++)
00023c  e3a05000          MOV      r5,#0
000240  ea000003          B        |L1.596|
                  |L1.580|
;;;94     		uart_printf("%c",p[i]);
000244  e7d61005          LDRB     r1,[r6,r5]
000248  e28f0f46          ADR      r0,|L1.872|
00024c  ebfffffe          BL       uart_printf
000250  e2855001          ADD      r5,r5,#1              ;93
                  |L1.596|
000254  e59f00c4          LDR      r0,|L1.800|
000258  e5900000          LDR      r0,[r0,#0]            ;93  ; download_len
00025c  e1550000          CMP      r5,r0                 ;93
000260  3afffff7          BCC      |L1.580|
;;;95         uart_printf("\nPress any key to continue...\n");
000264  e28f0c01          ADR      r0,|L1.876|
000268  ebfffffe          BL       uart_printf
;;;96         while(!uart_getkey());
00026c  e1a00000          MOV      r0,r0
                  |L1.624|
000270  ebfffffe          BL       uart_getkey
000274  e3500000          CMP      r0,#0
000278  0afffffc          BEQ      |L1.624|
;;;97     	return download_len;
00027c  e59f009c          LDR      r0,|L1.800|
000280  e5900000          LDR      r0,[r0,#0]  ; download_len
                  |L1.644|
000284  e28dd024          ADD      sp,sp,#0x24
000288  e8bd43f0          POP      {r4-r9,lr}
;;;98     	}
;;;99     
;;;100    	return 0;
;;;101    }
00028c  e12fff1e          BX       lr
                  |L1.656|
000290  e3a00000          MOV      r0,#0                 ;100
000294  eafffffa          B        |L1.644|
;;;102    
                          ENDP

                  |L1.664|
                          DCD      0x000005ea
                  |L1.668|
                          DCD      0xc0a8026f
                  |L1.672|
0002a0  4d696e69          DCB      "Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n",0
0002a4  20544654
0002a8  50205365
0002ac  72766572
0002b0  20312e30
0002b4  20284950
0002b8  203a2025
0002bc  642e2564
0002c0  2e25642e
0002c4  25642050
0002c8  4f52543a
0002cc  20256429
0002d0  0a00    
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L1.724|
0002d4  54797065          DCB      "Type tftp -i %d.%d.%d.%d put filename at the host PC\n",0
0002d8  20746674
0002dc  70202d69
0002e0  2025642e
0002e4  25642e25
0002e8  642e2564
0002ec  20707574
0002f0  2066696c
0002f4  656e616d
0002f8  65206174
0002fc  20746865
000300  20686f73
000304  74205043
000308  0a00    
00030a  00                DCB      0
00030b  00                DCB      0
                  |L1.780|
                          DCD      TftpLoadEnd
                  |L1.784|
                          DCD      TftpPutMark
                  |L1.788|
                          DCD      TftpPutBegin
                  |L1.792|
                          DCD      0x30008000
                  |L1.796|
                          DCD      download_addr
                  |L1.800|
                          DCD      download_len
                  |L1.804|
000324  53746172          DCB      "Starting the TFTP download...\n",0
000328  74696e67
00032c  20746865
000330  20544654
000334  5020646f
000338  776e6c6f
00033c  61642e2e
000340  2e0a00  
000343  00                DCB      0
                  |L1.836|
000344  0a646f77          DCB      "\ndownload 0x%x bytes to 0x%08x\n\n",0
000348  6e6c6f61
00034c  64203078
000350  25782062
000354  79746573
000358  20746f20
00035c  30782530
000360  38780a0a
000364  00      
000365  00                DCB      0
000366  00                DCB      0
000367  00                DCB      0
                  |L1.872|
000368  256300            DCB      "%c",0
00036b  00                DCB      0
                  |L1.876|
00036c  0a507265          DCB      "\nPress any key to continue...\n",0
000370  73732061
000374  6e79206b
000378  65792074
00037c  6f20636f
000380  6e74696e
000384  75652e2e
000388  2e0a00  
00038b  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=0

                  TftpLoadEnd
000000  00                DCB      0x00
                  TftpPutBegin
000001  00                DCB      0x00
                  TftpPutMark
000002  00                DCB      0x00
